#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ErrorCode(object):
  SUCCESS = 0
  UNEXCEPTED_ERROR = 1
  BUFFER_FULL = 2
  DESERIALIZE_FAILED = 3
  FILE_NOT_EXIST = 4
  IO_ERROR = 5
  TALOS_OPERATION_FAILED = 6
  INVALID_TOPIC = 7
  AGENT_NOT_READY = 8
  MODULED_STOPED = 9
  TOO_MANY_FILES = 10
  SERIALIZE_FAILED = 11
  THRIFT_TRANSPORT_FAILED = 12
  OPERATION_FAILED = 100
  HBASE_OPERATION_FAILED = 101
  TEAM_EXIST = 102
  TEAM_NOT_EXIST = 103
  VERSION_CONFLICTING_ERROR = 104
  MODULE_EXIST = 105
  MODULE_NOT_EXIST = 106
  INVALID_REQUEST_PARAMS = 107
  UNKNOW_TALOS_CLUSTER = 108
  LINK_UNIT_KEY_NOT_EXIST = 109
  PERMISSION_DENIED = 110

  _VALUES_TO_NAMES = {
    0: "SUCCESS",
    1: "UNEXCEPTED_ERROR",
    2: "BUFFER_FULL",
    3: "DESERIALIZE_FAILED",
    4: "FILE_NOT_EXIST",
    5: "IO_ERROR",
    6: "TALOS_OPERATION_FAILED",
    7: "INVALID_TOPIC",
    8: "AGENT_NOT_READY",
    9: "MODULED_STOPED",
    10: "TOO_MANY_FILES",
    11: "SERIALIZE_FAILED",
    12: "THRIFT_TRANSPORT_FAILED",
    100: "OPERATION_FAILED",
    101: "HBASE_OPERATION_FAILED",
    102: "TEAM_EXIST",
    103: "TEAM_NOT_EXIST",
    104: "VERSION_CONFLICTING_ERROR",
    105: "MODULE_EXIST",
    106: "MODULE_NOT_EXIST",
    107: "INVALID_REQUEST_PARAMS",
    108: "UNKNOW_TALOS_CLUSTER",
    109: "LINK_UNIT_KEY_NOT_EXIST",
    110: "PERMISSION_DENIED",
  }

  _NAMES_TO_VALUES = {
    "SUCCESS": 0,
    "UNEXCEPTED_ERROR": 1,
    "BUFFER_FULL": 2,
    "DESERIALIZE_FAILED": 3,
    "FILE_NOT_EXIST": 4,
    "IO_ERROR": 5,
    "TALOS_OPERATION_FAILED": 6,
    "INVALID_TOPIC": 7,
    "AGENT_NOT_READY": 8,
    "MODULED_STOPED": 9,
    "TOO_MANY_FILES": 10,
    "SERIALIZE_FAILED": 11,
    "THRIFT_TRANSPORT_FAILED": 12,
    "OPERATION_FAILED": 100,
    "HBASE_OPERATION_FAILED": 101,
    "TEAM_EXIST": 102,
    "TEAM_NOT_EXIST": 103,
    "VERSION_CONFLICTING_ERROR": 104,
    "MODULE_EXIST": 105,
    "MODULE_NOT_EXIST": 106,
    "INVALID_REQUEST_PARAMS": 107,
    "UNKNOW_TALOS_CLUSTER": 108,
    "LINK_UNIT_KEY_NOT_EXIST": 109,
    "PERMISSION_DENIED": 110,
  }


class GalaxyLCSException(TException):
  """
  Attributes:
   - errorCode
   - errMsg
   - details
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
    (3, TType.STRING, 'details', None, None, ), # 3
  )

  def __init__(self, errorCode=None, errMsg=None, details=None,):
    self.errorCode = errorCode
    self.errMsg = errMsg
    self.details = details

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.details = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GalaxyLCSException')
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 3)
      oprot.writeString(self.details.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errorCode is None:
      raise TProtocol.TProtocolException(message='Required field errorCode is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Record(object):
  """
  Attributes:
   - clusterName
   - orgId
   - topicName
   - teamId
   - data
   - extendAgentData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterName', None, None, ), # 1
    (2, TType.STRING, 'orgId', None, None, ), # 2
    (3, TType.STRING, 'topicName', None, None, ), # 3
    (4, TType.STRING, 'teamId', None, None, ), # 4
    (5, TType.LIST, 'data', (TType.STRING,None), None, ), # 5
    (6, TType.BOOL, 'extendAgentData', None, False, ), # 6
  )

  def __init__(self, clusterName=None, orgId=None, topicName=None, teamId=None, data=None, extendAgentData=thrift_spec[6][4],):
    self.clusterName = clusterName
    self.orgId = orgId
    self.topicName = topicName
    self.teamId = teamId
    self.data = data
    self.extendAgentData = extendAgentData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.orgId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.topicName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.teamId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.data = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.data.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.extendAgentData = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Record')
    if self.clusterName is not None:
      oprot.writeFieldBegin('clusterName', TType.STRING, 1)
      oprot.writeString(self.clusterName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.orgId is not None:
      oprot.writeFieldBegin('orgId', TType.STRING, 2)
      oprot.writeString(self.orgId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.topicName is not None:
      oprot.writeFieldBegin('topicName', TType.STRING, 3)
      oprot.writeString(self.topicName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.teamId is not None:
      oprot.writeFieldBegin('teamId', TType.STRING, 4)
      oprot.writeString(self.teamId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.data))
      for iter6 in self.data:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extendAgentData is not None:
      oprot.writeFieldBegin('extendAgentData', TType.BOOL, 6)
      oprot.writeBool(self.extendAgentData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clusterName is None:
      raise TProtocol.TProtocolException(message='Required field clusterName is unset!')
    if self.orgId is None:
      raise TProtocol.TProtocolException(message='Required field orgId is unset!')
    if self.topicName is None:
      raise TProtocol.TProtocolException(message='Required field topicName is unset!')
    if self.teamId is None:
      raise TProtocol.TProtocolException(message='Required field teamId is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
