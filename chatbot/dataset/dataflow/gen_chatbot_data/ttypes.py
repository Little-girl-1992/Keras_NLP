#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ChatbotDoubanGroupPage(object):
  """
  Attributes:
   - url
   - fetchTime
   - rawData
   - taskTag
   - linkinfo
   - fdsPath
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.I64, 'fetchTime', None, None, ), # 2
    (3, TType.STRING, 'rawData', None, None, ), # 3
    (4, TType.STRING, 'taskTag', None, None, ), # 4
    (5, TType.STRING, 'linkinfo', None, None, ), # 5
    (6, TType.STRING, 'fdsPath', None, None, ), # 6
  )

  def __init__(self, url=None, fetchTime=None, rawData=None, taskTag=None, linkinfo=None, fdsPath=None,):
    self.url = url
    self.fetchTime = fetchTime
    self.rawData = rawData
    self.taskTag = taskTag
    self.linkinfo = linkinfo
    self.fdsPath = fdsPath

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.fetchTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.rawData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.taskTag = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.linkinfo = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.fdsPath = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatbotDoubanGroupPage')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fetchTime is not None:
      oprot.writeFieldBegin('fetchTime', TType.I64, 2)
      oprot.writeI64(self.fetchTime)
      oprot.writeFieldEnd()
    if self.rawData is not None:
      oprot.writeFieldBegin('rawData', TType.STRING, 3)
      oprot.writeString(self.rawData)
      oprot.writeFieldEnd()
    if self.taskTag is not None:
      oprot.writeFieldBegin('taskTag', TType.STRING, 4)
      oprot.writeString(self.taskTag.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.linkinfo is not None:
      oprot.writeFieldBegin('linkinfo', TType.STRING, 5)
      oprot.writeString(self.linkinfo.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.fdsPath is not None:
      oprot.writeFieldBegin('fdsPath', TType.STRING, 6)
      oprot.writeString(self.fdsPath.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatbotDoubanGroupStruct(object):
  """
  Attributes:
   - topicId
   - url
   - updateTime
   - rawData
   - thisPage
   - totalPage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'topicId', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.I64, 'updateTime', None, None, ), # 3
    (4, TType.STRING, 'rawData', None, None, ), # 4
    (5, TType.I64, 'thisPage', None, None, ), # 5
    (6, TType.I64, 'totalPage', None, None, ), # 6
  )

  def __init__(self, topicId=None, url=None, updateTime=None, rawData=None, thisPage=None, totalPage=None,):
    self.topicId = topicId
    self.url = url
    self.updateTime = updateTime
    self.rawData = rawData
    self.thisPage = thisPage
    self.totalPage = totalPage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.topicId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.rawData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.thisPage = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.totalPage = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatbotDoubanGroupStruct')
    if self.topicId is not None:
      oprot.writeFieldBegin('topicId', TType.I64, 1)
      oprot.writeI64(self.topicId)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 3)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.rawData is not None:
      oprot.writeFieldBegin('rawData', TType.STRING, 4)
      oprot.writeString(self.rawData)
      oprot.writeFieldEnd()
    if self.thisPage is not None:
      oprot.writeFieldBegin('thisPage', TType.I64, 5)
      oprot.writeI64(self.thisPage)
      oprot.writeFieldEnd()
    if self.totalPage is not None:
      oprot.writeFieldBegin('totalPage', TType.I64, 6)
      oprot.writeI64(self.totalPage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
