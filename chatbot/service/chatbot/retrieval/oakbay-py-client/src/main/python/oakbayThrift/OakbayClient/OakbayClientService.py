#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def handleBqlRequest(self, domain, cluster, bql):
    """
    Parameters:
     - domain
     - cluster
     - bql
    """
    pass

  def handleIndexRequest(self, domain, cluster, contents):
    """
    Parameters:
     - domain
     - cluster
     - contents
    """
    pass

  def handleTemplatedBqlRequest(self, domain, cluster, template, bql):
    """
    Parameters:
     - domain
     - cluster
     - template
     - bql
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def handleBqlRequest(self, domain, cluster, bql):
    """
    Parameters:
     - domain
     - cluster
     - bql
    """
    self.send_handleBqlRequest(domain, cluster, bql)
    return self.recv_handleBqlRequest()

  def send_handleBqlRequest(self, domain, cluster, bql):
    self._oprot.writeMessageBegin('handleBqlRequest', TMessageType.CALL, self._seqid)
    args = handleBqlRequest_args()
    args.domain = domain
    args.cluster = cluster
    args.bql = bql
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_handleBqlRequest(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = handleBqlRequest_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "handleBqlRequest failed: unknown result");

  def handleIndexRequest(self, domain, cluster, contents):
    """
    Parameters:
     - domain
     - cluster
     - contents
    """
    self.send_handleIndexRequest(domain, cluster, contents)
    return self.recv_handleIndexRequest()

  def send_handleIndexRequest(self, domain, cluster, contents):
    self._oprot.writeMessageBegin('handleIndexRequest', TMessageType.CALL, self._seqid)
    args = handleIndexRequest_args()
    args.domain = domain
    args.cluster = cluster
    args.contents = contents
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_handleIndexRequest(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = handleIndexRequest_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "handleIndexRequest failed: unknown result");

  def handleTemplatedBqlRequest(self, domain, cluster, template, bql):
    """
    Parameters:
     - domain
     - cluster
     - template
     - bql
    """
    self.send_handleTemplatedBqlRequest(domain, cluster, template, bql)
    return self.recv_handleTemplatedBqlRequest()

  def send_handleTemplatedBqlRequest(self, domain, cluster, template, bql):
    self._oprot.writeMessageBegin('handleTemplatedBqlRequest', TMessageType.CALL, self._seqid)
    args = handleTemplatedBqlRequest_args()
    args.domain = domain
    args.cluster = cluster
    args.template = template
    args.bql = bql
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_handleTemplatedBqlRequest(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = handleTemplatedBqlRequest_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "handleTemplatedBqlRequest failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["handleBqlRequest"] = Processor.process_handleBqlRequest
    self._processMap["handleIndexRequest"] = Processor.process_handleIndexRequest
    self._processMap["handleTemplatedBqlRequest"] = Processor.process_handleTemplatedBqlRequest

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_handleBqlRequest(self, seqid, iprot, oprot):
    args = handleBqlRequest_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = handleBqlRequest_result()
    result.success = self._handler.handleBqlRequest(args.domain, args.cluster, args.bql)
    oprot.writeMessageBegin("handleBqlRequest", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_handleIndexRequest(self, seqid, iprot, oprot):
    args = handleIndexRequest_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = handleIndexRequest_result()
    result.success = self._handler.handleIndexRequest(args.domain, args.cluster, args.contents)
    oprot.writeMessageBegin("handleIndexRequest", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_handleTemplatedBqlRequest(self, seqid, iprot, oprot):
    args = handleTemplatedBqlRequest_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = handleTemplatedBqlRequest_result()
    result.success = self._handler.handleTemplatedBqlRequest(args.domain, args.cluster, args.template, args.bql)
    oprot.writeMessageBegin("handleTemplatedBqlRequest", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class handleBqlRequest_args:
  """
  Attributes:
   - domain
   - cluster
   - bql
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'cluster', None, None, ), # 2
    (3, TType.STRING, 'bql', None, None, ), # 3
  )

  def __init__(self, domain=None, cluster=None, bql=None,):
    self.domain = domain
    self.cluster = cluster
    self.bql = bql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bql = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleBqlRequest_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.cluster != None:
      oprot.writeFieldBegin('cluster', TType.STRING, 2)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.bql != None:
      oprot.writeFieldBegin('bql', TType.STRING, 3)
      oprot.writeString(self.bql)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handleBqlRequest_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (OakbaySearchResult, OakbaySearchResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = OakbaySearchResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleBqlRequest_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handleIndexRequest_args:
  """
  Attributes:
   - domain
   - cluster
   - contents
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'cluster', None, None, ), # 2
    (3, TType.LIST, 'contents', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, domain=None, cluster=None, contents=None,):
    self.domain = domain
    self.cluster = cluster
    self.contents = contents

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.contents = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.contents.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleIndexRequest_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.cluster != None:
      oprot.writeFieldBegin('cluster', TType.STRING, 2)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.contents != None:
      oprot.writeFieldBegin('contents', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.contents))
      for iter6 in self.contents:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handleIndexRequest_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Response, Response.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Response()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleIndexRequest_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handleTemplatedBqlRequest_args:
  """
  Attributes:
   - domain
   - cluster
   - template
   - bql
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'cluster', None, None, ), # 2
    (3, TType.STRING, 'template', None, None, ), # 3
    (4, TType.STRING, 'bql', None, None, ), # 4
  )

  def __init__(self, domain=None, cluster=None, template=None, bql=None,):
    self.domain = domain
    self.cluster = cluster
    self.template = template
    self.bql = bql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.template = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bql = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleTemplatedBqlRequest_args')
    if self.domain != None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.cluster != None:
      oprot.writeFieldBegin('cluster', TType.STRING, 2)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.template != None:
      oprot.writeFieldBegin('template', TType.STRING, 3)
      oprot.writeString(self.template)
      oprot.writeFieldEnd()
    if self.bql != None:
      oprot.writeFieldBegin('bql', TType.STRING, 4)
      oprot.writeString(self.bql)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handleTemplatedBqlRequest_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (OakbaySearchResult, OakbaySearchResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = OakbaySearchResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handleTemplatedBqlRequest_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
